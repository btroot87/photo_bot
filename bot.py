import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω
load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")

# –¢–≤–æ–π Telegram ID (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π)
OWNER_ID = 123456789

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(KeyboardButton("üì∏ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è"))
main_kb.add(KeyboardButton("üí¨ –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã"))
main_kb.add(KeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è"))

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
class BookingForm(StatesGroup):
    name = State()
    people = State()
    gender = State()
    age = State()
    purpose = State()
    concept = State()
    location = State()
    date = State()

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞ –∏–∑ –í–æ—Ä–æ–Ω–µ–∂–∞ üì∑\n"
        "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—ä—ë–º–∫—É, –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–º üíõ",
        reply_markup=main_kb
    )

@dp.message_handler(lambda message: message.text == "üì∏ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è")
async def start_booking(message: types.Message):
    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await BookingForm.name.set()

@dp.message_handler(state=BookingForm.name)
async def get_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –±—É–¥–µ—Ç –Ω–∞ —Å—ä—ë–º–∫–µ?")
    await BookingForm.people.set()

@dp.message_handler(state=BookingForm.people)
async def get_people(message: types.Message, state: FSMContext):
    await state.update_data(people=message.text)
    await message.answer("–ü–æ–ª —É—á–∞—Å—Ç–Ω–∏–∫–∞(–æ–≤)? (–º/–∂/–¥—Ä—É–≥–æ–µ)")
    await BookingForm.gender.set()

@dp.message_handler(state=BookingForm.gender)
async def get_gender(message: types.Message, state: FSMContext):
    gender_input = message.text.lower()
    await state.update_data(gender=gender_input)

    if "–∂" in gender_input:
        await state.update_data(
            ending="–∞", gender_word="–≥–æ—Ç–æ–≤–∞", decided="—Ä–µ—à–∏–ª–∞", describe="–æ–ø–∏—à–∏"
        )
    elif "–º" in gender_input:
        await state.update_data(
            ending="", gender_word="–≥–æ—Ç–æ–≤", decided="—Ä–µ—à–∏–ª", describe="–æ–ø–∏—à–∏"
        )
    else:
        await state.update_data(
            ending="(–∞)", gender_word="–≥–æ—Ç–æ–≤(–∞)", decided="—Ä–µ—à–∏–ª(–∞)", describe="–æ–ø–∏—à–∏"
        )

    await message.answer("–í–æ–∑—Ä–∞—Å—Ç?")
    await BookingForm.age.set()

@dp.message_handler(state=BookingForm.age)
async def get_age(message: types.Message, state: FSMContext):
    await state.update_data(age=message.text)
    await message.answer(
        "–¶–µ–ª—å —Å—ä—ë–º–∫–∏?\n\n–í—ã–±–µ—Ä–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏:\n- –¥–ª—è —Å–µ–±—è\n- –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π\n- –¥–µ–ª–æ–≤–æ–π –ø–æ—Ä—Ç—Ä–µ—Ç\n- –≤ –ø–æ–¥–∞—Ä–æ–∫\n- –¥—Ä—É–≥–æ–µ"
    )
    await BookingForm.purpose.set()

@dp.message_handler(state=BookingForm.purpose)
async def get_purpose(message: types.Message, state: FSMContext):
    await state.update_data(purpose=message.text)
    data = await state.get_data()
    await message.answer(
        f"–ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏—è ‚Äî {data['describe']}. "
        f"–ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É –ø—Ä–æ–¥—É–º–∞—Ç—å –≤—Å—ë: –æ—Ç –æ–±—Ä–∞–∑–∞ –∏ –æ–¥–µ–∂–¥—ã –¥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Å—ä—ë–º–∫–∏."
    )
    await BookingForm.concept.set()

@dp.message_handler(state=BookingForm.concept)
async def get_concept(message: types.Message, state: FSMContext):
    await state.update_data(concept=message.text)
    data = await state.get_data()
    await message.answer(
        f"–ñ–µ–ª–∞–µ–º–æ–µ –º–µ—Å—Ç–æ —Å—ä—ë–º–∫–∏? (—Å—Ç—É–¥–∏—è, –ø—Ä–∏—Ä–æ–¥–∞, –∏–ª–∏ –ø–æ–∫–∞ –Ω–µ {data['decided']} ‚Äî –ø–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å)"
    )
    await BookingForm.location.set()

@dp.message_handler(state=BookingForm.location)
async def get_location(message: types.Message, state: FSMContext):
    await state.update_data(location=message.text)
    await message.answer("–ö–∞–∫–∞—è –¥–∞—Ç–∞ —Ç–µ–±–µ —É–¥–æ–±–Ω–∞?")
    await BookingForm.date.set()

@dp.message_handler(state=BookingForm.date)
async def get_date(message: types.Message, state: FSMContext):
    await state.update_data(date=message.text)
    data = await state.get_data()

    summary = (
        f"üì∏ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—é!\n\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üë• –ö–æ–ª-–≤–æ —á–µ–ª–æ–≤–µ–∫: {data['people']}\n"
        f"‚öß –ü–æ–ª: {data['gender']}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
        f"üéØ –¶–µ–ª—å: {data['purpose']}\n"
        f"üé® –ö–æ–Ω—Ü–µ–ø—Ü–∏—è: {data['concept']}\n"
        f"üìç –õ–æ–∫–∞—Ü–∏—è: {data['location']}\n"
        f"üìÖ –î–∞—Ç–∞: {data['date']}"
    )

    # –∫–ª–∏–µ–Ω—Ç—É
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ! –Ø –≤—Å—ë –∑–∞–ø–∏—Å–∞–ª, —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Å—å —Å —Ç–æ–±–æ–π. "
        f"–¢—ã {data['gender_word']} –∫ —á—É–¥–µ—Å–Ω–æ–π —Å—ä—ë–º–∫–µ üòâ",
        reply_markup=main_kb
    )
    await message.answer(summary)

    # —Ç–µ–±–µ (—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—É)
    try:
        await bot.send_message(chat_id=OWNER_ID, text=summary)
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É: {e}")

    await state.finish()

@dp.message_handler(lambda message: message.text == "üí¨ –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
async def common_questions(message: types.Message):
    await message.answer(
        "–í–æ—Ç —á—Ç–æ —á–∞—â–µ –≤—Å–µ–≥–æ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç:\n\n"
        "üìç –ì–¥–µ –ø—Ä–æ—Ö–æ–¥—è—Ç —Å—ä—ë–º–∫–∏?\n‚Äî –í –í–æ—Ä–æ–Ω–µ–∂–µ –∏ –∫—Ä–∞—Å–∏–≤—ã—Ö –ø—Ä–∏—Ä–æ–¥–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏—è—Ö —Ä—è–¥–æ–º\n\n"
        "‚è± –°–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è?\n‚Äî –û–±—ã—á–Ω–æ 1‚Äì1.5 —á–∞—Å–∞\n\n"
        "üíÑ –ú–∞–∫–∏—è–∂ –≤–∫–ª—é—á—ë–Ω?\n‚Äî –î–∞! –†–∞–±–æ—Ç–∞—é —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –≤–∏–∑–∞–∂–∏—Å—Ç–∫–æ–π\n\n"
        "üí∞ –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç?\n‚Äî –í—Å—ë –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞. –ù–∞–ø–∏—à–∏ ‚Äî –ø–æ–¥–±–µ—Ä—É –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥ —Ç–µ–±—è"
    )

@dp.message_handler(lambda message: message.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è")
async def contact(message: types.Message):
    await message.answer(
        "–¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—É –Ω–∞–ø—Ä—è–º—É—é:\n\n"
        "üì≤ Telegram: @btroot\n"
        "üíå –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
    )

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)